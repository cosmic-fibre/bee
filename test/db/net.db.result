remote = require 'net.db'
---
...
fiber = require 'fiber'
---
...
log = require 'log'
---
...
msgpack = require 'msgpack'
---
...
LISTEN = require('uri').parse(db.cfg.listen)
---
...
space = db.schema.space.create('net_db_test_space')
---
...
index = space:create_index('primary', { type = 'tree' })
---
...
-- low level connection
log.info("create connection")
---
...
cn = remote:new(LISTEN.host, LISTEN.service)
---
...
cn:_wait_state({active = true, error = true}, 1)
---
- active
...
log.info("state is %s", cn.state)
---
...
cn:ping()
---
- true
...
log.info("ping is done")
---
...
cn:ping()
---
- true
...
log.info("ping is done")
---
...
cn:ping()
---
- true
...
-- check permissions
cn:call('unexists_procedure')
---
- error: Procedure 'unexists_procedure' is not defined
...
function test_foo(a,b,c) return { {{ [a] = 1 }}, {{ [b] = 2 }}, c } end
---
...
cn:call('test_foo', 'a', 'b', 'c')
---
- error: Execute access denied for user 'guest' to function 'test_foo'
...
cn:eval('return 2+2')
---
- error: Execute access denied for user 'guest'
...
db.schema.user.grant('guest','execute','universe')
---
...
cn:close()
---
...
cn = remote:new(db.cfg.listen)
---
...
cn:call('unexists_procedure')
---
- error: Procedure 'unexists_procedure' is not defined
...
cn:call('test_foo', 'a', 'b', 'c')
---
- error: Tuple/Key must be MsgPack array
...
cn:call(nil, 'a', 'b', 'c')
---
- error: Procedure 'nil' is not defined
...
cn:eval('return 2+2')
---
- 4
...
cn:eval('return 1, 2, 3')
---
- 1
- 2
- 3
...
cn:eval('return ...', 1, 2, 3)
---
- 1
- 2
- 3
...
cn:eval('return { k = "v1" }, true, {  xx = 10, yy = 15 }, nil')
---
- {k: v1}
- true
- {yy: 15, xx: 10}
- null
...
cn:eval('return nil')
---
- null
...
cn:eval('return')
---
...
cn:eval('error("exception")')
---
- error: 'eval:1: exception'
...
cn:eval('db.error(0)')
---
- error: Unknown error
...
cn:eval('!invalid expression')
---
- error: 'eval:1: unexpected symbol near ''!'''
...
remote.self:eval('return 1+1, 2+2')
---
- 2
- 4
...
remote.self:eval('return')
---
...
remote.self:eval('error("exception")')
---
- error: '[string "error("exception")"]:1: exception'
...
remote.self:eval('db.error(0)')
---
- error: Unknown error
...
remote.self:eval('!invalid expression')
---
- error: '[string "return !invalid expression"]:1: unexpected symbol near ''!'''
...
db.schema.user.revoke('guest','execute','universe')
---
...
db.schema.user.grant('guest','read,write,execute','universe')
---
...
cn:close()
---
...
cn = remote:new(db.cfg.listen)
---
...
cn:_select(space.id, space.index.primary.id, 123)
---
- []
...
space:insert{123, 345}
---
- [123, 345]
...
cn:_select(space.id, space.index.primary.id, 123)
---
- - [123, 345]
...
cn:_select(space.id, space.index.primary.id, 123, { limit = 0 })
---
- []
...
cn:_select(space.id, space.index.primary.id, 123, { limit = 1 })
---
- - [123, 345]
...
cn:_select(space.id, space.index.primary.id, 123, { limit = 1, offset = 1 })
---
- []
...
cn.space[space.id]  ~= nil
---
- true
...
cn.space.net_db_test_space ~= nil
---
- true
...
cn.space.net_db_test_space ~= nil
---
- true
...
cn.space.net_db_test_space.index ~= nil
---
- true
...
cn.space.net_db_test_space.index.primary ~= nil
---
- true
...
cn.space.net_db_test_space.index[space.index.primary.id] ~= nil
---
- true
...
cn.space.net_db_test_space.index.primary:select(123)
---
- - [123, 345]
...
cn.space.net_db_test_space.index.primary:select(123, { limit = 0 })
---
- []
...
cn.space.net_db_test_space.index.primary:select(nil, { limit = 1, })
---
- - [123, 345]
...
cn.space.net_db_test_space:insert{234, 1,2,3}
---
- [234, 1, 2, 3]
...
cn.space.net_db_test_space:insert{234, 1,2,3}
---
- error: Duplicate key exists in unique index 'primary' in space 'net_db_test_space'
...
cn.space.net_db_test_space.insert{234, 1,2,3}
---
- error: 'builtin/net.db.lua:244: Use space:method(...) instead space.method(...)'
...
cn.space.net_db_test_space:replace{354, 1,2,3}
---
- [354, 1, 2, 3]
...
cn.space.net_db_test_space:replace{354, 1,2,4}
---
- [354, 1, 2, 4]
...
cn.space.net_db_test_space:select{123}
---
- - [123, 345]
...
space:select({123}, { iterator = 'GE' })
---
- - [123, 345]
  - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_db_test_space:select({123}, { iterator = 'GE' })
---
- - [123, 345]
  - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_db_test_space:select({123}, { iterator = 'GT' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_db_test_space:select({123}, { iterator = 'GT', limit = 1 })
---
- - [234, 1, 2, 3]
...
cn.space.net_db_test_space:select({123}, { iterator = 'GT', limit = 1, offset = 1 })
---
- - [354, 1, 2, 4]
...
cn.space.net_db_test_space:select{123}
---
- - [123, 345]
...
cn.space.net_db_test_space:update({123}, { { '+', 2, 1 } })
---
- [123, 346]
...
cn.space.net_db_test_space:update(123, { { '+', 2, 1 } })
---
- [123, 347]
...
cn.space.net_db_test_space:select{123}
---
- - [123, 347]
...
cn.space.net_db_test_space:insert(cn.space.net_db_test_space:get{123}:update{ { '=', 1, 2 } })
---
- [2, 347]
...
cn.space.net_db_test_space:delete{123}
---
- [123, 347]
...
cn.space.net_db_test_space:select{2}
---
- - [2, 347]
...
cn.space.net_db_test_space:select({234}, { iterator = 'LT' })
---
- - [2, 347]
...
cn.space.net_db_test_space:update({1}, { { '+', 2, 2 } })
---
...
cn.space.net_db_test_space:delete{1}
---
...
cn.space.net_db_test_space:delete{2}
---
- [2, 347]
...
cn.space.net_db_test_space:delete{2}
---
...
-- test one-based indexing in splice operation (see update.test.lua)
cn.space.net_db_test_space:replace({10, 'abcde'})
---
- [10, 'abcde']
...
cn.space.net_db_test_space:update(10,  {{':', 2, 0, 0, '!'}})
---
- error: 'SPLICE error on field 2: offset is out of bound'
...
cn.space.net_db_test_space:update(10,  {{':', 2, 1, 0, '('}})
---
- [10, '(abcde']
...
cn.space.net_db_test_space:update(10,  {{':', 2, 2, 0, '({'}})
---
- [10, '(({abcde']
...
cn.space.net_db_test_space:update(10,  {{':', 2, -1, 0, ')'}})
---
- [10, '(({abcde)']
...
cn.space.net_db_test_space:update(10,  {{':', 2, -2, 0, '})'}})
---
- [10, '(({abcde}))']
...
cn.space.net_db_test_space:delete{10}
---
- [10, '(({abcde}))']
...
cn.space.net_db_test_space:select({}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn.space.net_db_test_space.index.primary:min()
---
- [234, 1, 2, 3]
...
cn.space.net_db_test_space.index.primary:min(354)
---
- [354, 1, 2, 4]
...
cn.space.net_db_test_space.index.primary:max()
---
- [354, 1, 2, 4]
...
cn.space.net_db_test_space.index.primary:max(234)
---
- [234, 1, 2, 3]
...
cn.space.net_db_test_space.index.primary:count()
---
- 2
...
cn.space.net_db_test_space.index.primary:count(354)
---
- 1
...
cn.space.net_db_test_space:get(354)
---
- [354, 1, 2, 4]
...
-- reconnects after errors
-- -- 1. no reconnect
cn:_fatal('Test fatal error')
---
...
cn.state
---
- closed
...
cn:ping()
---
- false
...
cn:call('test_foo')
---
- error: Connection is not established
...
-- -- 2 reconnect
cn = remote:new(LISTEN.host, LISTEN.service, { reconnect_after = .1 })
---
...
cn:_wait_state({active = true}, 1)
---
- active
...
cn.space ~= nil
---
- true
...
cn.space.net_db_test_space:select({}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn:_fatal 'Test error'
---
...
cn:_wait_state({active = true, activew = true}, 2)
---
- active
...
cn:ping()
---
- true
...
cn.state
---
- active
...
cn.space.net_db_test_space:select({}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
cn:_fatal 'Test error'
---
...
cn:_select(space.id, 0, {}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
-- send broken packet (remote server will close socket)
cn.s:syswrite(msgpack.encode(1) .. msgpack.encode('abc'))
---
- 5
...
fiber.sleep(.2)
---
...
cn.state
---
- active
...
cn:ping()
---
- true
...
-- -- dot-new-method
cn1 = remote.new(LISTEN.host, LISTEN.service)
---
...
cn1:_select(space.id, 0, {}, { iterator = 'ALL' })
---
- - [234, 1, 2, 3]
  - [354, 1, 2, 4]
...
-- -- error while waiting for response
type(fiber.create(function() fiber.sleep(.5) cn:_fatal('Test error') end))
---
- userdata
...
function pause() fiber.sleep(10) return true end
---
...
cn:call('pause')
---
- error: Test error
...
cn:call('test_foo', 'a', 'b', 'c')
---
- error: Tuple/Key must be MsgPack array
...
-- call
remote.self:call('test_foo', 'a', 'b', 'c')
---
- - [{'a': 1}]
  - [{'b': 2}]
  - ['c']
...
cn:call('test_foo', 'a', 'b', 'c')
---
- error: Tuple/Key must be MsgPack array
...
-- long replies
function long_rep() return { 1,  string.rep('a', 5000) } end
---
...
res = cn:call('long_rep')
---
...
res[1][1] == 1
---
- true
...
res[1][2] == string.rep('a', 5000)
---
- true
...
function long_rep() return { 1,  string.rep('a', 50000) } end
---
...
res = cn:call('long_rep')
---
...
res[1][1] == 1
---
- true
...
res[1][2] == string.rep('a', 50000)
---
- true
...
-- auth
cn.proto.b64decode('gJLocxbO32VmfO8x04xRVxKfgwzmNVM2t6a1ME8XsD0=')
---
- !!binary gJLocxbO32VmfO8x04xRVxKfgwzmNVM2t6a1ME8XsD0=
...
cn.proto.b64decode('gJLoc!!!!!!!')
---
- !!binary gJLo
...
cn = remote:new(LISTEN.host, LISTEN.service, { user = 'netdb', password = '123', wait_connected = true })
---
...
cn:is_connected()
---
- false
...
cn.error
---
- User 'netdb' is not found
...
cn.state
---
- closed
...
db.schema.user.create('netdb', { password  = 'test' })
---
...
db.schema.user.grant('netdb', 'read, write, execute', 'universe');
---
...
cn = remote:new(LISTEN.host, LISTEN.service, { user = 'netdb', password = 'test' })
---
...
cn.state
---
- active
...
cn.error
---
- null
...
cn:ping()
---
- true
...
function ret_after(to) fiber.sleep(to) return {{to}} end
---
...
-- timeouts
cn:timeout(1).space.net_db_test_space.index.primary:select{234}
---
- - [234, 1, 2, 3]
...
cn:call('ret_after', .01)
---
- - [0.01]
...
cn:timeout(1):call('ret_after', .01)
---
- - [0.01]
...
cn:timeout(.01):call('ret_after', 1)
---
- error: Timeout exceeded
...
cn = remote:timeout(0.0000000001):new(LISTEN.host, LISTEN.service, { user = 'netdb', password = '123' })
---
...
cn = remote:timeout(1):new(LISTEN.host, LISTEN.service, { user = 'netdb', password = '123' })
---
...
remote.self:ping()
---
- true
...
remote.self.space.net_db_test_space:select{234}
---
- - [234, 1, 2, 3]
...
remote.self:timeout(123).space.net_db_test_space:select{234}
---
- - [234, 1, 2, 3]
...
remote.self:is_connected()
---
- true
...
remote.self:wait_connected()
---
- true
...
-- cleanup database after tests
space:drop()
---
...
-- admin console tests
cnc = remote:new(os.getenv('ADMIN'))
---
...
cnc.console ~= nil
---
- true
...
cnc:console('return 1, 2, 3, "string", nil')
---
- '---

  - 1

  - 2

  - 3

  - string

  - null

  ...

'
...
cnc:console('error("test")')
---
- '---

  - error: test

  ...

'
...
cnc:console('a = {1, 2, 3, 4}; return a[3]')
---
- '---

  - 3

  ...

'
...
-- #545 user or password is not defined
remote:new(LISTEN.host, LISTEN.service, { user = 'test' })
---
- error: 'net.db: password is not defined'
...
remote:new(LISTEN.host, LISTEN.service, { password = 'test' })
---
- error: 'net.db: user is not defined'
...
-- #544 usage for remote[point]method
cn = remote:new(LISTEN.host, LISTEN.service)
---
...
cn:eval('return true')
---
- true
...
cn.eval('return true')
---
- error: 'usage: remote:eval(expr, ...)'
...
cn.ping()
---
- error: 'usage: remote:ping()'
...
cn:close()
---
...
remote.self:eval('return true')
---
- true
...
remote.self.eval('return true')
---
- error: 'usage: remote:eval(expr, ...)'
...
-- uri as the first argument
uri = string.format('%s:%s@%s:%s', 'netdb', 'test', LISTEN.host, LISTEN.service)
---
...
cn = remote.new(uri)
---
...
cn:ping()
---
- true
...
cn:close()
---
...
uri = string.format('%s@%s:%s', 'netdb', LISTEN.host, LISTEN.service)
---
...
remote.new(uri)
---
- error: 'net.db: password is not defined'
...
cn = remote.new(uri, { password = 'test' })
---
...
cn:ping()
---
- true
...
cn:close()
---
...
-- #594: bad argument #1 to 'setmetatable' (table expected, got number)
--# setopt delimiter ';'
function gh594()
    local cn = remote:new(db.cfg.listen)
    local ping = fiber.create(function() cn:ping() end)
    cn:call('dostring', 'return 2 + 2')
    cn:close()
end;
---
...
--# setopt delimiter ''
gh594()
---
...
-- #636: Reload schema on demand
sp = db.schema.space.create('test_old')
---
...
_ = sp:create_index('primary')
---
...
sp:insert{1, 2, 3}
---
- [1, 2, 3]
...
con = remote.new(db.cfg.listen)
---
...
con:ping()
---
- true
...
con.space.test_old:select{}
---
- - [1, 2, 3]
...
con.space.test == nil
---
- true
...
sp = db.schema.space.create('test')
---
...
_ = sp:create_index('primary')
---
...
sp:insert{2, 3, 4}
---
- [2, 3, 4]
...
con.space.test == nil
---
- true
...
con:reload_schema()
---
...
con.space.test:select{}
---
- - [2, 3, 4]
...
db.space.test:drop()
---
...
db.space.test_old:drop()
---
...
con:close()
---
...
file_log = require('fio').open('bee.log', {'O_RDONLY', 'O_NONBLOCK'})
---
...
file_log:seek(0, 'SEEK_END') ~= 0
---
- true
...
--# setopt delimiter ';'
_ = fiber.create(
   function()
         conn = require('net.db').new(db.cfg.listen)
         conn.call('no_such_function', {})
   end
);
---
...
while true do
   local line = file_log:read(2048)
   if line ~= nil then
      if string.match(line, "ER_UNKNOWN") == nil then
         return "Success"
      else
         return "Failure"
      end
   end
   fiber.sleep(0.01)
end;
---
- Success
...
--# setopt delimiter ''
file_log:close()
---
- true
...
db.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
