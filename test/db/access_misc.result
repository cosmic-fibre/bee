session = db.session
---
...
--
-- Check a double create space
--
s = db.schema.space.create('test')
---
...
s = db.schema.space.create('test')
---
- error: Space 'test' already exists
...
--
-- Check a double drop space
--
s:drop()
---
...
s:drop()
---
- error: Space 'test' does not exist
...
--
-- Check double create user
--
db.schema.user.create('testus')
---
...
db.schema.user.create('testus')
---
- error: User 'testus' already exists
...
s = db.schema.space.create('admin_space')
---
...
index = s:create_index('primary', {type = 'hash', parts = {1, 'NUM'}})
---
...
s:insert({1})
---
- [1]
...
s:insert({2})
---
- [2]
...
--
-- Check double grant and read access
--
db.schema.user.grant('testus', 'read', 'space', 'admin_space')
---
...
db.schema.user.grant('testus', 'read', 'space', 'admin_space')
---
- error: User 'testus' already has read access on space 'admin_space'
...
session.su('testus')
---
...
s:select(1)
---
- - [1]
...
s:insert({3})
---
- error: Write access denied for user 'testus' to space 'admin_space'
...
s:delete(1)
---
- error: Write access denied for user 'testus' to space 'admin_space'
...
s:drop()
---
- error: Read access denied for user 'testus' to space '_index'
...
--
-- Check double revoke
--
session.su('admin')
---
...
db.schema.user.revoke('testus', 'read', 'space', 'admin_space')
---
...
db.schema.user.revoke('testus', 'read', 'space', 'admin_space')
---
- error: User 'testus' does not have read access on space 'admin_space'
...
session.su('testus')
---
...
s:select(1)
---
- error: Read access denied for user 'testus' to space 'admin_space'
...
session.su('admin')
---
...
--
-- Check write access on space
-- 
db.schema.user.grant('testus', 'write', 'space', 'admin_space')
---
...
session.su('testus')
---
...
s:select(1)
---
- error: Read access denied for user 'testus' to space 'admin_space'
...
s:delete(1)
---
- [1]
...
s:insert({3})
---
- [3]
...
s:drop()
---
- error: Read access denied for user 'testus' to space '_index'
...
session.su('admin')
---
...
--
-- Check double drop user
--
db.schema.user.drop('testus')
---
...
db.schema.user.drop('testus')
---
- error: User 'testus' is not found
...
--
-- Check 'guest' user
--
session.su('guest')
---
...
session.uid()
---
- 0
...
db.space._user:select(1)
---
- error: Read access denied for user 'guest' to space '_user'
...
s:select(1)
---
- error: Read access denied for user 'guest' to space 'admin_space'
...
s:insert({4})
---
- error: Write access denied for user 'guest' to space 'admin_space'
...
s:delete({3})
---
- error: Write access denied for user 'guest' to space 'admin_space'
...
s:drop()
---
- error: Read access denied for user 'guest' to space '_index'
...
gs = db.schema.space.create('guest_space')
---
- error: Write access denied for user 'guest' to space '_schema'
...
db.schema.func.create('guest_func')
---
- error: Read access denied for user 'guest' to space '_func'
...
session.su('admin')
---
...
s:select()
---
- - [2]
  - [3]
...
--
-- Create user with universe read&write grants
-- and create this user session
--
db.schema.user.create('uniuser')
---
...
db.schema.user.grant('uniuser', 'read, write, execute', 'universe')
---
...
session.su('uniuser')
---
...
uid = session.uid()
---
...
--
-- Check universal user
-- Check delete currently authenticated user
--
db.schema.user.drop('uniuser')
---
- error: Create or drop access denied for user 'uniuser'
...
--
--Check create, call and drop function
--
db.schema.func.create('uniuser_func')
---
...
function uniuser_func() return 'hello' end
---
...
uniuser_func()
---
- hello
...
db.schema.func.drop('uniuser_func')
---
...
--
-- Check create and drop space
--
us = db.schema.space.create('uniuser_space')
---
...
us:drop()
---
...
--
-- Check create and drop user
--
db.schema.user.create('uniuser_testus')
---
...
db.schema.user.drop('uniuser_testus')
---
...
--
-- Check access system and any spaces
--
db.space.admin_space:select()
---
- - [2]
  - [3]
...
db.space._user:select(1)
---
- - [1, 1, 'admin', 'user']
...
db.space._space:select(280)
---
- - [280, 1, '_space', 'memtx', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'owner',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'engine', 'type': 'str'},
      {'name': 'field_count', 'type': 'num'}, {'name': 'flags', 'type': 'str'}, {
        'name': 'format', 'type': '*'}]]
...
us = db.schema.space.create('uniuser_space')
---
...
db.schema.func.create('uniuser_func')
---
...
session.su('admin')
---
...
db.schema.user.create('someuser')
---
...
db.schema.user.grant('someuser', 'read, write, execute', 'universe')
---
...
session.su('someuser')
---
...
--
-- Check drop objects of another user
--
s:drop()
---
- error: Create or drop access denied for user 'someuser'
...
us:drop()
---
- error: Create or drop access denied for user 'someuser'
...
db.schema.func.drop('uniuser_func')
---
- error: Create or drop access denied for user 'someuser'
...
db.schema.user.drop('uniuser_testus')
---
- error: User 'uniuser_testus' is not found
...
session.su('admin')
---
...
db.schema.func.drop('uniuser_func')
---
...
db.schema.user.drop('someuser')
---
...
db.schema.user.drop('uniuser_testus')
---
- error: User 'uniuser_testus' is not found
...
db.schema.user.drop('uniuser')
---
...
db.space._user:delete(uid)
---
...
s:drop()
---
...
--
-- Check write grant on _user
--
db.schema.user.create('testuser')
---
...
maxuid = db.space._user.index.primary:max()[1]
---
...
db.schema.user.grant('testuser', 'write', 'space', '_user')
---
...
session.su('testuser')
---
...
testuser_uid = session.uid()
---
...
db.space._user:delete(2)
---
- error: Create or drop access denied for user 'testuser'
...
db.space._user:select(1)
---
- error: Read access denied for user 'testuser' to space '_user'
...
uid = db.space._user:insert{maxuid+1, session.uid(), 'someone', 'user'}[1]
---
...
db.space._user:delete(uid)
---
- [5, 4, 'someone', 'user']
...
session.su('admin')
---
...
db.space._user:select(1)
---
- - [1, 1, 'admin', 'user']
...
db.space._user:delete(testuser_uid)
---
- error: 'Failed to drop user ''testuser'': the user has objects'
...
db.schema.user.revoke('testuser', 'write', 'space', '_user')
---
...
--
-- Check read grant on _user
--
db.schema.user.grant('testuser', 'read', 'space', '_user')
---
...
session.su('testuser')
---
...
db.space._user:delete(2)
---
- error: Write access denied for user 'testuser' to space '_user'
...
db.space._user:select(1)
---
- - [1, 1, 'admin', 'user']
...
db.space._user:insert{uid, session.uid(), 'someone2', 'user'}
---
- error: Write access denied for user 'testuser' to space '_user'
...
session.su('admin')
---
...
--
-- Check read grant on _index
--
db.schema.user.grant('testuser', 'read', 'space', '_index')
---
...
session.su('testuser')
---
...
db.space._index:select(272)
---
- - [272, 0, 'primary', 'tree', 1, 1, 0, 'str']
...
db.space._index:insert{512, 1,'owner','tree', 1, 1, 0,'num'}
---
- error: Write access denied for user 'testuser' to space '_index'
...
session.su('admin')
---
...
db.schema.user.revoke('testuser', 'read, write, execute', 'universe')
---
- error: User 'testuser' does not have read, write, execute access on universe 'nil'
...
--
-- Check that itertors check privileges
--
s = db.schema.space.create('glade') 
---
...
db.schema.user.grant('testuser', 'read', 'space', 'glade')
---
...
index = s:create_index('primary', {unique = true, parts = {1, 'NUM', 2, 'STR'}})
---
...
s:insert({1, 'A'})
---
- [1, 'A']
...
s:insert({2, 'B'})
---
- [2, 'B']
...
s:insert({3, 'C'})
---
- [3, 'C']
...
s:insert({4, 'D'})
---
- [4, 'D']
...
t = {}
---
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('testuser')
---
...
s:select()
---
- - [1, 'A']
  - [2, 'B']
  - [3, 'C']
  - [4, 'D']
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('admin')
---
...
db.schema.user.revoke('testuser', 'read', 'space', 'glade')
---
...
db.schema.user.grant('testuser', 'write', 'space', 'glade')
---
...
session.su('testuser')
---
...
s:select()
---
- error: Read access denied for user 'testuser' to space 'glade'
...
for key, v in s.index.primary:pairs(1, {iterator = 'GE'}) do table.insert (t, v) end 
---
- error: Read access denied for user 'testuser' to space 'glade'
...
t
---
- []
...
t = {}
---
...
session.su('admin')
---
...
db.schema.user.grant('testuser', 'read, write, execute', 'space', 'glade')
---
...
session.su('testuser')
---
...
s:select()
---
- - [1, 'A']
  - [2, 'B']
  - [3, 'C']
  - [4, 'D']
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
...
t
---
- - [3, 'C']
  - [4, 'D']
...
t = {}
---
...
session.su('guest')
---
...
s:select()
---
- error: Read access denied for user 'guest' to space 'glade'
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
- error: Read access denied for user 'guest' to space 'glade'
...
t
---
- []
...
t = {}
---
...
session.su('guest')
---
...
s:select()
---
- error: Read access denied for user 'guest' to space 'glade'
...
for key, v in s.index.primary:pairs(3, {iterator = 'GE'}) do table.insert (t, v) end 
---
- error: Read access denied for user 'guest' to space 'glade'
...
t
---
- []
...
session.su('admin')
---
...
db.schema.user.drop('testuser')
---
...
s:drop()
---
...
db.space._user:select()
---
- - [0, 1, 'guest', 'user']
  - [1, 1, 'admin', 'user']
  - [2, 1, 'public', 'role']
  - [3, 1, 'replication', 'role']
...
db.space._space:select()
---
- - [272, 1, '_schema', 'memtx', 0, '', [{'type': 'str', 'name': 'key'}]]
  - [280, 1, '_space', 'memtx', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'owner',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'engine', 'type': 'str'},
      {'name': 'field_count', 'type': 'num'}, {'name': 'flags', 'type': 'str'}, {
        'name': 'format', 'type': '*'}]]
  - [281, 1, '_vspace', 'sysview', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'owner',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'engine', 'type': 'str'},
      {'name': 'field_count', 'type': 'num'}, {'name': 'flags', 'type': 'str'}, {
        'name': 'format', 'type': '*'}]]
  - [288, 1, '_index', 'memtx', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'iid',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'type', 'type': 'str'},
      {'name': 'unique', 'type': 'num'}, {'name': 'part_count', 'type': 'num'}]]
  - [289, 1, '_vindex', 'sysview', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'iid',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'type', 'type': 'str'},
      {'name': 'unique', 'type': 'num'}, {'name': 'part_count', 'type': 'num'}]]
  - [296, 1, '_func', 'memtx', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'owner',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'setuid', 'type': 'num'}]]
  - [297, 1, '_vfunc', 'sysview', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'owner',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'setuid', 'type': 'num'}]]
  - [304, 1, '_user', 'memtx', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'owner',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'type', 'type': 'str'},
      {'name': 'auth', 'type': '*'}]]
  - [305, 1, '_vuser', 'sysview', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'owner',
        'type': 'num'}, {'name': 'name', 'type': 'str'}, {'name': 'type', 'type': 'str'},
      {'name': 'auth', 'type': '*'}]]
  - [312, 1, '_priv', 'memtx', 0, '', [{'name': 'grantor', 'type': 'num'}, {'name': 'grantee',
        'type': 'num'}, {'name': 'object_type', 'type': 'str'}, {'name': 'object_id',
        'type': 'num'}, {'name': 'privilege', 'type': 'num'}]]
  - [313, 1, '_vpriv', 'sysview', 0, '', [{'name': 'grantor', 'type': 'num'}, {'name': 'grantee',
        'type': 'num'}, {'name': 'object_type', 'type': 'str'}, {'name': 'object_id',
        'type': 'num'}, {'name': 'privilege', 'type': 'num'}]]
  - [320, 1, '_cluster', 'memtx', 0, '', [{'name': 'id', 'type': 'num'}, {'name': 'uuid',
        'type': 'str'}]]
...
db.space._func:select()
---
- - [1, 1, 'db.schema.user.info', 1]
...
session = nil
---
...
