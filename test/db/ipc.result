fiber = require('fiber')
---
...
ch = fiber.channel()
---
...
ch:size()
---
- 1
...
ch:count()
---
- 0
...
ch:is_full()
---
- false
...
ch:is_empty()
---
- true
...
ch:get(.1)
---
- null
...
ch:put()
---
- error: 'usage: channel:put(var [, timeout])'
...
ch:count()
---
- 0
...
ch:put('test')
---
- true
...
ch:get()
---
- test
...
ch:get('wrong timeout')
---
- error: timeout must be a number
...
ch:get(-10)
---
- error: wrong timeout
...
ch:put(234)
---
- true
...
ch:put(345, .5)
---
- false
...
ch:count()
---
- 1
...
ch:is_full()
---
- true
...
ch:is_empty()
---
- false
...
buffer = {}
---
...
--# setopt delimiter ';'
tfbr = fiber.create(
    function()
        while true do
            table.insert(buffer, ch:get())
        end
    end
);
---
...
t = {};
---
...
for i = 1, 10 do
    table.insert(t, {i, ch:put(i, 0.1)})
end;
---
...
--# setopt delimiter ''
t
---
- - - 1
    - true
  - - 2
    - true
  - - 3
    - true
  - - 4
    - true
  - - 5
    - true
  - - 6
    - true
  - - 7
    - true
  - - 8
    - true
  - - 9
    - true
  - - 10
    - true
...
ch:has_readers()
---
- true
...
ch:has_writers()
---
- false
...
fiber.cancel(tfbr)
---
...
ch:has_readers()
---
- false
...
ch:has_writers()
---
- false
...
ch:count()
---
- 0
...
ch:put(db.info.pid)
---
- true
...
ch:count()
---
- 1
...
ch:is_full()
---
- true
...
ch:is_empty()
---
- false
...
ch:get(db.info.pid) == db.info.pid
---
- true
...
buffer
---
- - 234
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  - 9
  - 10
...
ch:is_empty()
---
- true
...
ch:broadcast()
---
- error: 'usage: channel:broadcast(variable)'
...
ch:broadcast(123)
---
- true
...
ch:get()
---
- 123
...
ch:is_full()
---
- false
...
ch:is_empty()
---
- true
...
--# setopt delimiter ';'
tfbr = fiber.create(
    function()
        while true do
            local v = ch:get()
            table.insert(buffer, {'tfbr', tostring(v)})
        end
    end
);
---
...
tfbr2 = fiber.create(
    function()
        while true do
            local v = ch:get()
            table.insert(buffer, {'tfbr2', tostring(v)})
        end
    end
);
---
...
--# setopt delimiter ''
buffer = {}
---
...
buffer
---
- []
...
ch:is_full()
---
- false
...
ch:is_empty()
---
- true
...
ch:put(1)
---
- true
...
ch:put(2)
---
- true
...
ch:put(3)
---
- true
...
ch:put(4)
---
- true
...
ch:put(5)
---
- true
...
ch:broadcast('broadcast message!')
---
- 2
...
t = {}
---
...
for i = 35, 45 do table.insert(t, ch:put(i)) end
---
...
t
---
- - true
  - true
  - true
  - true
  - true
  - true
  - true
  - true
  - true
  - true
  - true
...
buffer
---
- - - tfbr
    - '1'
  - - tfbr2
    - '2'
  - - tfbr
    - '3'
  - - tfbr2
    - '4'
  - - tfbr
    - '5'
  - - tfbr2
    - broadcast message!
  - - tfbr
    - broadcast message!
  - - tfbr2
    - '35'
  - - tfbr
    - '36'
  - - tfbr2
    - '37'
  - - tfbr
    - '38'
  - - tfbr2
    - '39'
  - - tfbr
    - '40'
  - - tfbr2
    - '41'
  - - tfbr
    - '42'
  - - tfbr2
    - '43'
  - - tfbr
    - '44'
  - - tfbr2
    - '45'
...
ch = fiber.channel(1)
---
...
ch:is_closed()
---
- false
...
passed = false
---
...
type(fiber.create(function() if ch:get() == nil then passed = true end end))
---
- userdata
...
ch:close()
---
...
passed
---
- true
...
ch:get()
---
- null
...
ch:get()
---
- null
...
ch:put(10)
---
- false
...
ch:is_closed()
---
- true
...
ch = fiber.channel(1)
---
...
ch:put(true)
---
- true
...
ch:is_closed()
---
- false
...
passed = false
---
...
type(fiber.create(function() if ch:put(true) == false then passed = true end end))
---
- userdata
...
ch:close()
---
...
passed
---
- true
...
ch:get()
---
- null
...
ch:get()
---
- null
...
ch:put(10)
---
- false
...
ch:is_closed()
---
- true
...
-- race conditions
chs= {}
---
...
count= 0
---
...
res= { }
---
...
--# setopt delimiter ';'
for i = 1, 10 do table.insert(chs, fiber.channel()) end;
---
...
for i = 1, 10 do
    local no = i fiber.create(
        function()
            fiber.self():name('pusher')
            while true do
                chs[no]:put({no})
                fiber.sleep(0.001 * math.random())
            end
        end
    )
end;
---
...
for i = 1, 10 do
    local no = i fiber.create(
        function()
            fiber.self():name('receiver')
            while true do
                local r = chs[no]:get(math.random() * .001)
                if r ~= nil and r[1] == no then
                    res[no] = true
                elseif r ~= nil then
                    break
                end
                fiber.sleep(0.001 * math.random())
                count = count + 1
            end
            res[no] = false
        end
    )
end;
---
...
for i = 1, 100 do fiber.sleep(0.01) if count > 2000 then break end end;
---
...
count > 2000, #res, res;
---
- true
- 10
- - true
  - true
  - true
  - true
  - true
  - true
  - true
  - true
  - true
  - true
...
--# setopt delimiter ''
--
-- gh-756: channel:close() leaks memory
--
ffi = require('ffi')
---
...
ffi.cdef[[ struct gh756 { int k; }; ]]
---
...
ct = ffi.metatype('struct gh756', { __gc = function() refs = refs - 1; end })
---
...
-- create 10 objects and put they to a channel
refs = 10
---
...
ch = fiber.channel(refs)
---
...
for i=1,refs do ch:put(ffi.new(ct, i)) end
---
...
-- get an object from the channel, run GC and check the number of objects
ch:get().k == 1
---
- true
...
collectgarbage('collect')
---
- 0
...
refs
---
- 9
...
ch:get().k == 2
---
- true
...
collectgarbage('collect')
---
- 0
...
refs
---
- 8
...
-- close the channel and check the number of objects
ch:close()
---
...
collectgarbage('collect')
---
- 0
...
refs -- must be zero
---
- 0
...
