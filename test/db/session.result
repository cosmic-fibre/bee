session = db.session
---
...
fiber = require('fiber')
---
...
space = db.schema.space.create('tweedledum')
---
...
index = space:create_index('primary', { type = 'hash' })
---
...
session.exists(session.id())
---
- true
...
session.peer(session.id())
---
- null
...
session.exists()
---
- error: 'session.exists(sid): bad arguments'
...
session.exists(1, 2, 3)
---
- error: 'session.exists(sid): bad arguments'
...
session.exists(1234567890)
---
- false
...
-- check session.id()
session.id() > 0
---
- true
...
f = fiber.create(function() failed = session.id() == 0 end)
---
...
while f:status() ~= 'dead' do fiber.sleep(0) end
---
...
failed
---
- false
...
session.peer() == session.peer(session.id())
---
- true
...
-- check on_connect/on_disconnect triggers
function noop() end
---
...
session.on_connect(noop)
---
...
session.on_disconnect(noop)
---
...
-- check it's possible to reset these triggers
function fail() error('hear') end
---
...
session.on_connect(fail, noop)
---
...
session.on_disconnect(fail, noop)
---
...
-- check on_connect/on_disconnect argument count and type
session.on_connect()
---
- error: 'trigger reset: incorrect arguments'
...
session.on_disconnect()
---
- error: 'trigger reset: incorrect arguments'
...
session.on_connect(function() end, function() end)
---
- error: 'trigger reset: Trigger is not found'
...
session.on_disconnect(function() end, function() end)
---
- error: 'trigger reset: Trigger is not found'
...
session.on_connect(1, 2)
---
- error: 'trigger reset: incorrect arguments'
...
session.on_disconnect(1, 2)
---
- error: 'trigger reset: incorrect arguments'
...
session.on_connect(1)
---
- error: 'trigger reset: incorrect arguments'
...
session.on_disconnect(1)
---
- error: 'trigger reset: incorrect arguments'
...
-- use of nil to clear the trigger
session.on_connect(nil, fail)
---
...
session.on_disconnect(nil, fail)
---
...
-- check how connect/disconnect triggers work
function inc() active_connections = active_connections + 1 end
---
...
function dec() active_connections = active_connections - 1 end
---
...
net = { db = require('net.db') }
---
...
session.on_connect(inc)
---
...
session.on_disconnect(dec)
---
...
active_connections = 0
---
...
LISTEN = require('uri').parse(db.cfg.listen)
---
...
c = net.db:new(LISTEN.host, LISTEN.service)
---
...
while active_connections < 1 do fiber.sleep(0.001) end
---
...
active_connections
---
- 1
...
c1 = net.db:new(LISTEN.host, LISTEN.service)
---
...
while active_connections < 2 do fiber.sleep(0.001) end
---
...
active_connections
---
- 2
...
c:close()
---
...
c1:close()
---
...
while active_connections > 0 do fiber.sleep(0.001) end
---
...
active_connections
---
- 0
...
session.on_connect(nil, inc)
---
...
session.on_disconnect(nil, dec)
---
...
-- write audit trail of connect/disconnect into a space
function audit_connect() db.space['tweedledum']:insert{session.id()} end
---
...
function audit_disconnect() db.space['tweedledum']:delete{session.id()} end
---
...
session.on_connect(audit_connect)
---
...
session.on_disconnect(audit_disconnect)
---
...
db.schema.user.grant('guest', 'read,write,execute', 'universe')
---
...
a = net.db:new(LISTEN.host, LISTEN.service)
---
...
a:call('dostring', 'return space:get{session.id()}[1] == session.id()')[1][1]
---
- true
...
a:eval('return session.sync() ~= 0')
---
- true
...
a:close()
---
...
-- cleanup
session.on_connect(nil, audit_connect)
---
...
session.on_disconnect(nil, audit_disconnect)
---
...
active_connections
---
- 0
...
space:drop()
---
...
session.uid()
---
- 1
...
session.user()
---
- admin
...
session.sync()
---
- 0
...
fiber = nil
---
...
session = nil
---
...
db.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
