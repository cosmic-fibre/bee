
##
## obj-c leaks
##

{
   <obj-c internals>
   Memcheck:Leak
   fun:malloc
   fun:objc_malloc
   ...
}

{
   <obj-c internals>
   Memcheck:Leak
   fun:calloc
   fun:objc_calloc
   ...
}

{
   <obj-c internals>
   Memcheck:Leak
   fun:realloc
   fun:objc_realloc
   ...
}

{
   <obj-c internals>
   Memcheck:Leak
   ...
   fun:objc_msg_lookup
   ...
}

{
   <obj-c internals>
   Memcheck:Leak
   ...
   fun:.objc_load_function
   ...
}

{
   <obj-c internals>
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:objc_register_selector_copy
   ...
}


##
## libev internals
##

{
   <uninitialized value>
   Memcheck:Param
   write(buf)
   fun:__write_nocancel
   fun:evpipe_write
   fun:ev_feed_signal
   fun:ev_sighandler
   ...
}

{
   <ev loop destroy>
   Memcheck:Leak
   ...
   fun:ev_default_destroy
   fun:bee_free
   ...
}

##
## backtrace
##

## backtrace implementation is low-level and
## produces alot of warnings.

{
   <backtrace internals>
   Memcheck:Cond
   fun:backtrace
   ...
}

{
   <backtrace internals>
   Memcheck:Value8
   fun:backtrace
   ...
}

{
   <backtrace internals>
   Memcheck:Cond
   fun:vfprintf
   fun:vsnprintf
   fun:snprintf
   fun:backtrace
   ...
}

{
   <backtrace internals>
   Memcheck:Value8
   fun:_itoa_word
   fun:vfprintf
   fun:vsnprintf
   fun:snprintf
   fun:backtrace
   ...
}

{
   <backtrace internals>
   Memcheck:Cond
   fun:_itoa_word
   fun:vfprintf
   fun:vsnprintf
   fun:snprintf
   fun:backtrace
   ...
}

##
## db allocations
## 

## we can't directly free tuple allocations.

{
   <db replace command (insert)>
   Memcheck:Leak
   fun:salloc
   fun:tuple_alloc
   fun:_i_Replace__execute__
   fun:db_process_rw
   ...
}


{
   <db update command>
   Memcheck:Leak
   fun:salloc
   fun:tuple_alloc
   fun:_i_Update__execute__
   fun:db_process_rw
   ...
}

##
## bee/lua suppressions
##

#----------------------------------------------------------------------------#
# bee_lua function
#----------------------------------------------------------------------------#

#
# lua_* function suppressions
#

{
   <lua_* from luajit library suppression>
   Memcheck:Cond
   ...
   fun:lua_*
   fun:bee_lua
   ...
}

{
   <lua_* from luajit library suppression>
   Memcheck:Cond
   ...
   fun:lua_*
   fun:bee_lua_dostring
   fun:bee_lua
   ...
}

{
   <lua_* from luajit library suppression in admin console>
   Memcheck:Cond
   ...
   fun:lua_*
   fun:bee_lua_tostring
   fun:bee_lua_printstack_yaml
   fun:bee_lua
   ...
}

#
# luaL_* function suppressions
#

{
   <luaL_* from luajit library suppression in bee_lua>
   Memcheck:Cond
   ...
   fun:luaL_*
   fun:bee_lua
   ...
}

{
   <luaL_* from luajit library suppression in bee_lua>
   Memcheck:Cond
   ...
   fun:luaL_*
   fun:bee_lua_dostring
   fun:bee_lua
   ...
}

{
   <luaL_* from luajit library suppression in bee_lua>
   Memcheck:Cond
   ...
   fun:luaL_*
   fun:bee_lua_tostring
   fun:bee_lua_printstack_yaml
   fun:bee_lua
   ...
}

# third_party/luajit/src/lj.supp -- add as recommended in
# http://lua-users.org/lists/lua-l/2011-08/msg00736.html

# Valgrind suppression file for LuaJIT 2.x.
{
   Optimized string compare
   Memcheck:Addr4
   fun:lj_str_cmp
}
{
   Optimized string compare
   Memcheck:Addr4
   fun:lj_str_new
}
{
   Optimized string compare
   Memcheck:Cond
   fun:lj_str_new
}
